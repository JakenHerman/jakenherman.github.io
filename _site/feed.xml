<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jaken Herman</title>
    <description>Software Engineer, Brewer of Beer, Husband</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>2020-09-03</pubDate>
    <lastBuildDate>Thu, 03 Sep 2020 09:17:56 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Configuring + Installing Chadwick for Parsing Retrosheet Data</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/chadwick.jpg&quot; alt=&quot;Henry Chadwick&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post assumes you’ve set up VirtualBox &amp;amp; Vagrant. If you have not completed this step, follow the steps outlined in my previous blog post: https://www.jakenherman.com/articles/2020-08/virtualbox-vagrant-setup.&lt;/p&gt;

&lt;p&gt;The first thing we’re going to do is open up our terminal and run &lt;code class=&quot;highlighter-rouge&quot;&gt;cd baseball&lt;/code&gt;, which is the directory we created in the previous post.&lt;/p&gt;

&lt;p&gt;After than, we need to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; that contains the Chadwick software installer and configuration files. To download this, go to the chadwickbureau GitHub page, the Chadwick repository, and navigate to the “Releases” page. Here’s a quick link to take you there directly: https://github.com/chadwickbureau/chadwick/releases&lt;/p&gt;

&lt;p&gt;Take the latest release in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; format, and move that file into your baseball directory. Once the tar file is in your baseball directory, in your terminal run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;, followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; . &lt;/p&gt;

&lt;p&gt;Your terminal instance will now be running on your VirtualBox virtual machine. What we need to do now is move the tar file we downloaded earlier into the &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local/src directory&lt;/code&gt; (this file will currently be sitting in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/vagrant&lt;/code&gt;). We’ll first navigate to the directory we’re moving the file into by running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /usr/local/src&lt;/code&gt;, then run the command below to copy the Chadwick tar file into the current directory (keep in mind, my file’s version number is 0.8.1, but yours may be different - update your command accordingly):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/copy_chadwick_to_src.png&quot; alt=&quot;Copy and Unpack the Chadwick Tar File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that Chadwick has been copied and unpacked, we need to configure the software and complete the installation. To do this, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt; file that you can see in the &lt;code class=&quot;highlighter-rouge&quot;&gt;chadwick-0.8.1&lt;/code&gt; directory when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; to compile, &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt; to install the software to our virtual machine, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt; to make sure the program can link to the libraries it needs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/configure_chadwick.png&quot; alt=&quot;Configure, Make, Install, and Link the new Chadwick Files&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To test that Chadwick was properly installed, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;cwevent&lt;/code&gt; command, and you should get the following output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/cwevent_test.png&quot; alt=&quot;cwevent should succesfully fail (what a strange sentance)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While this is technically an error, it means the installation was a success. &lt;code class=&quot;highlighter-rouge&quot;&gt;cwevent&lt;/code&gt; is a command that Chadwick uses to parse Retrosheet event files, and since we’ve not yet provided one - we get this warning.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to you in your quest to begin working with Chadwick and Retrosheet. In the next post, we’ll download our first few Retrosheet files and begin exploring.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2020-09/configuring-chadwick-on-vagrant</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2020-09/configuring-chadwick-on-vagrant</guid>
        
        
        <category>MLB</category>
        
        <category>Data Science</category>
        
        <category>Chadwick</category>
        
        <category>Retrosheet</category>
        
      </item>
    
      <item>
        <title>Setting up VirtualBox+Vagrant</title>
        <description>&lt;p&gt;Setting up VirtualBox and Vagrant is not only a breeze, but it’s also free. This combo is great for simple projects, much like the project we’re working on in this series (should you choose to finish this full series) - parsing Retrosheet baseball data using Chadwick in order to create useful R data frames for visualization.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Keep in mind throughout this post that your download+setup process may vary slightly, but the main process will remain similar enough to follow.&lt;/p&gt;

&lt;h1 id=&quot;step-1-download-and-install-virtualbox&quot;&gt;Step 1: Download and Install VirtualBox&lt;/h1&gt;
&lt;p&gt;Navigate to the VirtualBox download page here: https://www.virtualbox.org/wiki/Downloads, and select the download that is appropriate for your current operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/VirtualBoxDownload.png&quot; alt=&quot;VirtualBox Download Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run your installer and complete the standard installation process you follow for any other software.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MacOS Users: An issue may occur where your installation is being blocked by your Security &amp;amp; Privacy settings. If this occurs, do the following:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/Security-Privacy-Window.png&quot; alt=&quot;Security Privacy Window Error&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;System Preferences&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Security &amp;amp; Privacy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;There will be a message that says &lt;code class=&quot;highlighter-rouge&quot;&gt;System software from developer &quot;Oracle America, Inc.&quot; was blocked from loading.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click the lock icon in the bottom left of the window &amp;amp; enter your password&lt;/li&gt;
  &lt;li&gt;Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Allow&lt;/code&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;step-2-download--installvagrant&quot;&gt;Step 2: Download &amp;amp; Install Vagrant&lt;/h1&gt;
&lt;p&gt;Navigate to the Vagrant download page here: https://www.vagrantup.com/downloads, and select the download that is appropriate for your current operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/VagrantDownload.png&quot; alt=&quot;Vagrant Download Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run your installer and complete the standard installation process you follow for any other software.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;step-3-set-up-directory-and-initialize-vagrantbox&quot;&gt;Step 3: Set up Directory and Initialize Vagrant Box&lt;/h1&gt;
&lt;p&gt;Now that we have VirtualBox and Vagrant installed, we need to set up a directory to use the two together. Keep in mind, we’ll never explicitly open the VirtualBox application, we only downloaded and installed it so Vagrant would be able to use it in the background.&lt;/p&gt;

&lt;p&gt;Open up your terminal, make a new directory (in this example I named mine baseball), then initialize a Vagrant box of your choice (boxes listed here: https://app.vagrantup.com/boxes/search). In this example, I’m using ubuntu/trusty64:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/VagrantInit.png&quot; alt=&quot;Initialize Vagrant Box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant init ...&lt;/code&gt; command could take up to an hour to run, so grab a cup of joe ☕, it may be a while!
When your initialization is complete, you’ll notice a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; in your baseball directory. As described by the Vagrant website:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The primary function of the Vagrantfile is to describe the type of machine required for a project, and how to configure and provision these machines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;step-4-run-vagrant--sshin&quot;&gt;Step 4: Run Vagrant + SSH In&lt;/h1&gt;
&lt;p&gt;Once your Vagrant box has been initialized, the next step is easy - just run vagrant up to spool up your VirtualBox background process and SSH in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/VagrantUp.png&quot; alt=&quot;SSH Into Vagrant Box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll now be in your virtual machine! Keep in mind when using this that if you create a file in the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;, the files will be added to your non-virtual &lt;code class=&quot;highlighter-rouge&quot;&gt;baseball&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Check back in the next post and we’ll get Chadwick downloaded and configured so we can begin playing around with Retrosheet data!&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2020-08/virtualbox-vagrant-setup</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2020-08/virtualbox-vagrant-setup</guid>
        
        
        <category>MLB</category>
        
        <category>Environment Setup</category>
        
        <category>Vagrant</category>
        
      </item>
    
      <item>
        <title>MLB Draft '20 By The Numbers</title>
        <description>&lt;p&gt;With no baseball being played so far in 2020, there hasn’t been anything incredibly interesting to analyze or look at besides historical data (in the MLB at least). On June 10th and June 11th, however, we finally got our first bit of new MLB information to play around with - the draft. I’ve taken data from Rounds 1-5 and compiled them into some (hopefully) interesting visuals.&lt;/p&gt;

&lt;h1&gt;Picks by State&lt;/h1&gt;

&lt;p&gt;Let’s start with a simple question. What state produced the most sought after baseball talent this year? California. The values used for the visual below may not reflect where a player was born and raised, rather it is the location of the high school or college the player was drafted from. This also excludes Owen Caissie and David Calabrese of Ontario, Canada.&lt;/p&gt;

&lt;iframe src=&quot;https://codesandbox.io/embed/mlb-20-draft-picks-by-state-9h3b5?fontsize=11&amp;amp;hidenavigation=1&amp;amp;module=%2Fsrc%2Findex.js&amp;amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;mlb-20-draft-picks-by-state&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;h1&gt;Picks by Position&lt;/h1&gt;

&lt;p&gt;Next, let’s look at draft picks by position. This includes every single pick - all 159 of them. As you can see in the chart below, pitchers were definitely shown some love while first basemen lagged behind (Although the #1 pick Spencer Torkelson played 1B, his primary position was marked as OF on MLB. This is likely the case for many utility players).&lt;/p&gt;

&lt;iframe src=&quot;https://codesandbox.io/embed/misty-sun-z3g7e?fontsize=11&amp;amp;hidenavigation=1&amp;amp;module=%2Fsrc%2Findex.js&amp;amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;mlb-20-draft-picks-by-position&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;So who &lt;strong&gt;didn’t&lt;/strong&gt; take any pitchers? Only &lt;em&gt;three&lt;/em&gt; teams! The Detroit Tigers, Tampa Bay Rays, and Milwaukee Brewers.&lt;/p&gt;

&lt;div style=&quot;display: flex; max-width: 800px; margin-left: auto; margin-right: auto; margin-top: 45px; margin-bottom: 45px;&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/img/MLBLogos/tigers.png&quot; alt=&quot;Detroit Tigers Logo&quot; height=&quot;100&quot; /&gt;
  &lt;img src=&quot;http://localhost:4000/img/MLBLogos/rays.png&quot; alt=&quot;Tampa Bay Rays Logo&quot; height=&quot;100&quot; /&gt;
  &lt;img src=&quot;http://localhost:4000/img/MLBLogos/brewers.png&quot; alt=&quot;Milwaukee Brewers Logo&quot; height=&quot;100&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;With all of these pitchers being picked, let’s see how the top 5 picks compare to one another using WHIP, ERA, BB/9, HR/9, and H/9. Not that these metrics alone tell you the sole offensive value of a pitcher, I just chose them for fun. (FYI for non-baseball fans, for all of these metrics a lower number is preferable).&lt;/p&gt;

&lt;h1&gt;Top 5 Pitcher Metrics Heatmap&lt;/h1&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/mlb-draft-20-top-5-pitchers-metrics-heatmap-kwx6p?fontsize=11&amp;amp;hidenavigation=1&amp;amp;module=%2Fsrc%2Findex.js&amp;amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;mlb-draft-20-top-5-pitchers-metrics-heatmap&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I’d love to do many more draft visualizations and maybe even dip into some KBO numbers, but for now I’m going to call it a night! Thanks for stopping by.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2020-06/simple-mlb-draft-20-visuals</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2020-06/simple-mlb-draft-20-visuals</guid>
        
        
        <category>MLB</category>
        
        <category>JavaScript</category>
        
        <category>Data Visualization</category>
        
      </item>
    
      <item>
        <title>Fetching and Displaying API Data for MLB The Show 19</title>
        <description>&lt;p&gt;Per the sub-title, this is “Part 2”. If you didn’t read Part 1, I would suggest going back and reading that now. Now that we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; that automatically deploys to a Heroku Dyno when we push a change to our GitHub repository, it’s time to make the app actually do something. Before starting, though, we are going to need to add a few public npm packages, like AG Grid, Semantic UI, and Axios. AG Grid is going to help us display our data retrieved from the API in a nice table format without having to do too much legwork on our own, Semantic UI will help us create a beautiful app with pre-made UI components, and Axios will allow us to make API calls. To add these packages to our application, first &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into your project directory, then run the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm i --save semantic-ui-react semantic-ui-css axios ag-grid-community ag-grid-react&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once these packages have all been added, open the project in your favorite code editor. Delete all pre-generated code files within the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder except for &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;. In these two files, clear almost everything until your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById('root'));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And your &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';

function App() {
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;

    &amp;lt;/div&amp;gt;
  );
}

export default App;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next thing we want to do is make sure all of our Semantic UI stylesheets get imported to our project. To do this, add the following line to &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, just below the &lt;code class=&quot;highlighter-rouge&quot;&gt;import App from './App';&lt;/code&gt; line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import 'semantic-ui-css/semantic.min.css'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the API we will be using to pull community market listings for MLB The Show 19 has a few different filterable options, but for the purposes of this blog, we’re going to use the default parameters and just call &lt;code class=&quot;highlighter-rouge&quot;&gt;https://mlb19.theshownation.com/apis/listings.json&lt;/code&gt;. To see additional capabilities, go to https://mlb19.theshownation.com/api_docs. Before we set up our axios call, we first want to define a state property called &lt;code class=&quot;highlighter-rouge&quot;&gt;rowData&lt;/code&gt; that will hold our results. To do this, modify &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; to look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';

class App extends React.Component {

  constructor (props) {
    super(props);
    this.state = {
      rowData: []
    }
  }

  render() {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
  
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that our state is set up and ready to be modified once we get data, we can set up an axios call to obtain the data. After the &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt; function, but just before the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;, add a new function called &lt;code class=&quot;highlighter-rouge&quot;&gt;getListings()&lt;/code&gt;, and set up an axios inside and set the state’s &lt;code class=&quot;highlighter-rouge&quot;&gt;rowData&lt;/code&gt; to the response of the axios call. Once your component is mounted, make a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;getListings()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt; // import * as axios from 'axios' &amp;lt;-- put this in your imports section
  getListings() {
    axios.get('https://cors-anywhere.herokuapp.com/https://mlb19.theshownation.com/apis/listings.json')
    .then((response) =&amp;gt; {
      this.setState({
        rowData: response.data
      })
    })
    .catch((err) =&amp;gt; {
      console.log(err);
    })
  }

  componentDidMount () {
    this.getListings();
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now our state will hold the listings data, we just need to display it. To do this, we are going to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;columnDefs&lt;/code&gt; property to our component’s state, then in the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, we’re going to set up AG Grid. So, the new state should look like this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;  constructor (props) {
    super(props);
    this.state = {
      columnDefs: [{
        headerName: &quot;Name&quot;, field: &quot;name&quot;
      }, {
        headerName: &quot;Best Sell Price&quot;, field: &quot;best_sell_price&quot;
      }, {
        headerName: &quot;Best Buy Price&quot;, field: &quot;best_buy_price&quot;
      }],
      rowData: []
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before moving onto our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;, let’s import necessary AG Grid components and stylesheets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/dist/styles/ag-grid.css';
import 'ag-grid-community/dist/styles/ag-theme-balham.css';&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And your new &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;  render() {
    return (
      &amp;lt;div 
        className=&quot;ag-theme-balham&quot;
        style= 
      &amp;gt;
        &amp;lt;AgGridReact
          columnDefs={this.state.columnDefs}
          rowData={this.state.rowData.listings}&amp;gt;
        &amp;lt;/AgGridReact&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Start up your project by running &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start&lt;/code&gt;, and behold - you now have live data pulling from MLB The Show 19’s community market API. Now, I’d like to center this table and perhaps stick it in a semantic ui segment. To do this, in your imports, add the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import { Grid, Segment, Header } from 'semantic-ui-react'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, change your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; to include each of the imported components (keep in mind, this is a horrible way of centering AG Grids, but it works for the purposes of this blog):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;  render() {
    return (
        &amp;lt;Grid columns={3}&amp;gt;
          &amp;lt;Grid.Row&amp;gt;
            &amp;lt;Grid.Column width={3}&amp;gt;&amp;lt;/Grid.Column&amp;gt;
            &amp;lt;Grid.Column width={10}&amp;gt;
              &amp;lt;br /&amp;gt;
              &amp;lt;Header&amp;gt;MLB The Show 19 Community Market Listings&amp;lt;/Header&amp;gt;
              &amp;lt;Segment&amp;gt;
                &amp;lt;div 
                  className=&quot;ag-theme-balham&quot;
                  style= 
                &amp;gt;
                  &amp;lt;AgGridReact
                    columnDefs={this.state.columnDefs}
                    rowData={this.state.rowData.listings}&amp;gt;
                  &amp;lt;/AgGridReact&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/Segment&amp;gt;
            &amp;lt;/Grid.Column&amp;gt;
            &amp;lt;Grid.Column width={3}&amp;gt;&amp;lt;/Grid.Column&amp;gt;
          &amp;lt;/Grid.Row&amp;gt;
        &amp;lt;/Grid&amp;gt;
    );
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-10/mlb-19-community-listings</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-10/mlb-19-community-listings</guid>
        
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        <category>API</category>
        
      </item>
    
      <item>
        <title>Dynamic HTML Titles in React with NFL's Helmet</title>
        <description>&lt;p&gt;Using React through &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; is great, but when we consider that it will create a single-page application, 
we begin to realize that changing properties in the document head of our html file is seemingly not so easy to do - but that
could not be further from the truth.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;react-helmet&lt;/code&gt; is a reusable React component created by the NFL that can manage all of your changes to the document head, and it could
not be any simpler to use. It supports server-side rendering, and while this blog post is focused solely on changing HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; tags,
&lt;code class=&quot;highlighter-rouge&quot;&gt;react-helmet&lt;/code&gt; supports all valid head tags: &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;noscript&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Let’s quit talking about it and let’s get into the code. First, create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; application (named whatever you want) and open it up in your favorite
text editor (if you don’t know how to do this, see the official &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; &lt;a href=&quot;https://create-react-app.dev/docs/getting-started&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you’re in your project, delete the content from the pre-generated  &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file and replace the file with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';
import './App.css';

function App() {
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because we haven’t made any modifications to the document title yet, the title within the tab should be “React App” by default. For this simple example, we’re going to change the title based on a certain &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; within our &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component. So, let’s modify our functional component &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; to be a class component, and give it a state object that will hold the value we’d like our title to be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';
import './App.css';

class App extends React.Component {
  
  constructor(props) {
    super(props);
    this.state = {
      titleName: ''
    };
  }

  render () {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now this will, of course, make no change to the title at this point (after all, we haven’t even installed &lt;code class=&quot;highlighter-rouge&quot;&gt;react-helmet&lt;/code&gt; yet!), but we’re just setting up our project so when we get to the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-helmet&lt;/code&gt; part, it’s much more satisfying. What I’d like to do is add an input field that allows the user to type in what they would like the title of the tab to be. So we’re going to create an input and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;onChange&lt;/code&gt; of that input, we’re going to update our &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;titleName&lt;/code&gt; key’s value to the value within the input, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      titleName: ''
    };
  }

  changeTitle(ev) {
    this.setState({
      titleName: ev.target.value
    });
  }

  render () {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.titleName}&amp;lt;/h1&amp;gt;
        &amp;lt;input onChange={this.changeTitle.bind(this)}&amp;gt;&amp;lt;/input&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, I threw the &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.titleName&lt;/code&gt; in an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; so we would have quick-and-easy proof that our state is being updated when the input’s &lt;code class=&quot;highlighter-rouge&quot;&gt;onChange&lt;/code&gt; event is fired.&lt;/p&gt;

&lt;p&gt;Now, for the fun part. Open up your CLI and run the command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i react-helmet

  &lt;span class=&quot;c&quot;&gt;# or, using Yarn:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add react-helmet&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that &lt;code class=&quot;highlighter-rouge&quot;&gt;react-helmet&lt;/code&gt; has been added to our project, we can add it to our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; component. To do this, we’re first going to simply import the component, then just like we would in a typical HTML file, we’re going to put the title information at the very top of our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; return, only instead of wrapping it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, we’re going to wrap it in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Helmet&amp;gt;&lt;/code&gt; tags. And of course, for the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt;’s value, we’re going to set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.titleName&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-react&quot; data-lang=&quot;react&quot;&gt;import React from 'react';
import { Helmet } from 'react-helmet';

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      titleName: ''
    };
  }

  changeTitle(ev) {
    this.setState({
      titleName: ev.target.value
    });
  }

  render () {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;Helmet&amp;gt;
          &amp;lt;title&amp;gt;{this.state.titleName}&amp;lt;/title&amp;gt;
        &amp;lt;/Helmet&amp;gt;
        &amp;lt;input onChange={this.changeTitle.bind(this)}&amp;gt;&amp;lt;/input&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now when changes are made to the input field, you can see the html title changes in the browser tab:
&lt;img src=&quot;http://localhost:4000/img/dynamic_title.gif&quot; alt=&quot;Dynamic Titles in React&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Helmet&amp;gt;&lt;/code&gt; can be used on any components, just keep in mind that child components will always override and helmet data passed through their parent components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading, folks. Hope this taught you something.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-09/react-helmet-dynamic-titles</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-09/react-helmet-dynamic-titles</guid>
        
        
        <category>React</category>
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Setting up Automatic React Application Deploys on Heroku Dynos</title>
        <description>&lt;p&gt;Per the sub-title, this is “Part 1”. In this series, we’re going to build out a community market listing react application for MLB The Show 19 and set up an automatic pipeline to build and deploy our React application from a GitHub repository to a Heroku Dyno. In this post we will scaffold out the react app and get the automatic deployment set up for Heroku, which will prepare ourselves to create the components necessary to list out all listings for MLB The Show 19’s Community Market. Why MLB The Show 19? Because… it’s &lt;em&gt;baseball&lt;/em&gt;. If you’re not familiar with MLB The Show 19 - it’s a baseball video game for PlayStation 4 and it has a community market that allows players to list baseball cards, stadiums, and equipment that other players can buy to use for their team. In this project, we will only build out listings for baseball cards (i.e. players), not stadiums or equipment or anything else. If that is something that interests you, I would highly recommend you extend the application to meet your needs.&lt;/p&gt;

&lt;p&gt;The first thing we need to do to get started is to create a GitHub repository to have source control over our application and to have a place to store our code. To do this, go to GitHub.com and create a GitHub repository. Then, to get that repository on your local machine, use either a git GUI program or just use the command line interface and run the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https://www.github.com/&amp;lt;path_to_your_project&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, change directories to your GitHub repository by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;your_project_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next thing we need to do is actually get into the meat and potatoes of the application. We need to build something to put on our newly created GitHub repository. To do this, we need to create a new react application. Open up your command line interface and run the command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt; npx create-react-app mlb-the-show-community-market-listings
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will install &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;react-scripts&lt;/code&gt;, and a few other packages that you will find useful. &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; is a facebook-supported way to create single-page React applications that many folks in the front-end community use. Unlike next, razzle, and a few other popular server-side rendering frameworks, CRA renders content on the client-side, which could have some downsides in performance, but we are not necessarily worried about that for the purposes of this project.&lt;/p&gt;

&lt;p&gt;Now that your application has been created, let’s just leave it at that - we will make code changes in the next post. For right now, we’re going to check in the project as-is. So, via some git GUI or command line, commit your changes and push your code to your GitHub repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;'initial commit'&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We want our Heroku Dyno to rebuild our application every time a change is made to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch on our GitHub repository. But before we set this up, we need to create a Heroku Pipeline! Assuming you already have a Heroku application created, navigate to dashboard.heroku.com/apps, then select “New” followed by “Create new pipeline”. In the pipeline name input field, type ‘mlb-the-show-cm-listings’. Next, set yourself to be the Pipeline owner, then in the area that says “Connect to GitHub”, connect your GitHub account to this Heroku pipeline. Once you’ve connected your GitHub account, select the GitHub repository we created earlier in the post by searching for the repository name, then press the “Connect” button. Once your GitHub repository has been connected, press the “Create pipeline” button.&lt;/p&gt;

&lt;p&gt;Once your pipeline has been created, you will see a page that has three “steps”: Review Apps, Staging, Production. In the card underneath the “Staging” step, press the “Add app…” button, followed by the purple “Create new app…” button. In the app name, you’ll have to think of something on your own, as heroku app names must be unique. Once you’ve decided on a name, press the “Create app” button to finalize the app creation.&lt;/p&gt;

&lt;p&gt;Now under your “Staging” area, the card you see will contain your newly created app. Click on your app name under the “Staging” area to open the Heroku app, then go to “Settings”. Scroll down until you see the section labeled “Buildpacks”. Press the purple “Add buildpack” button, then select the &lt;code class=&quot;highlighter-rouge&quot;&gt;nodejs&lt;/code&gt; buildpack from the list of officially supported buildpacks, then press “Save changes”.&lt;/p&gt;

&lt;p&gt;Next, navigate away from “Settings” by clicking on the “Deploy” tab. Scroll down until you reach the section labeled “Automatic deploys”. Press the gray “Enable Automatic Deploys” button. You will see the text change to read&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Automatic deploys from &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; are enabled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we just need to trigger the deploy. Let’s make a change to our project and commit/push the changes so our Heroku deploy will be triggered.&lt;/p&gt;

&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder of your React app we created earlier in this post, and in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;, change the line that says:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  Edit &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;src/App.js&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and save to reload.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello Heroku!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, via some git GUI or command line, commit your changes and push your code to your GitHub repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;'trigger heroku deploy'&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now navigate to your heroku app’s activity page to see if a build was triggered: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://dashboard.heroku.com/apps/&amp;lt;your_app_name&amp;gt;/activity&lt;/code&gt;. If the build failed due to a message similar to this&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Node.js app on Heroku requires a ‘package.json’ at the root of the directory structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;then all you need to do is make sure your github repository doesn’t consist of another folder containing your react app rather than the repository containing the react app itself.&lt;/p&gt;

&lt;p&gt;Another common issue is having an outdated Yarn lockfile, so if you still get a build failure, go to your command line (within your react app directory), and run the following commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn install
git add yarn.lock
git commit -m &lt;span class=&quot;s1&quot;&gt;'updated yarn lockfile'&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you don’t have a failure, you will see “Build in progress…” for a while, which will then change to “Build succeeded”. Once you have a “Build succeed”, a new activity will be created on your activity feed and it will say “Deployed &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA_OF_YOUR_COMMIT&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;So that’s great - we’ve set up a Heroku dyno to automatically deploy our react application when a change is made. The only problem is… where does it deploy to? Navigate away from the “Activity” tab and go to “Settings” again. Scroll down until you see “Domains and certificates”. In the “Domain” section, you will see a line like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your app can be found at &lt;some_link_to_your_app&gt;&lt;/some_link_to_your_app&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigating to that domain address will show your application. Keep in mind, you can add a custom domain at any point.&lt;/p&gt;

&lt;p&gt;Fantastic - now we’ve got a react app automatically deploying to a Heroku dyno, now we just need that react app to do something cool! In the next post, we’ll begin creating the React components necessary to view the Community Market listings.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-09/mlb-19-community-listings</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-09/mlb-19-community-listings</guid>
        
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        <category>API</category>
        
        <category>Heroku</category>
        
      </item>
    
      <item>
        <title>DailyUI Challenge 002</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://media.licdn.com/dms/image/C5622AQF24cV88T9mVw/feedshare-shrink_8192/0?e=1568851200&amp;amp;v=beta&amp;amp;t=tjqFnhHhl793SCviu7nDJMeGZUqt7SJenAo8bnuCWK4&quot; style=&quot;width: auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DailyUI challenge 002 - Design a credit card checkout form or page. Did this one without a wire-framing tool - instead opted to just use HTML, CSS, and JavaScript. I only worked on it for about an hour, so I’m not too upset with the results. The card type icon (Visa, MasterCard, AMEX, etc. does change depending on the start of the card number).&lt;/p&gt;

&lt;p&gt;Things I could improve on:
 - The fonts are pretty ugly, I’d like to spend more time browsing available fonts.
 - Responsiveness. Because this was just part of a challenge and not production code, I did not consider mobile viewing in the design.&lt;/p&gt;

&lt;p&gt;CodePen Link : https://codepen.io/JakenHerman/pen/MWgKNvm
Dribble Link : https://dribbble.com/shots/6990265-Credit-Card-Checkout-DailyUI-002&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-06/dailyui-002</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-06/dailyui-002</guid>
        
        
        <category>UX</category>
        
        <category>UI</category>
        
        <category>Wireframe</category>
        
        <category>CSS</category>
        
        <category>JavaScript</category>
        
        <category>CodePen</category>
        
      </item>
    
      <item>
        <title>How to put your Android device in Developer Mode</title>
        <description>&lt;p&gt;If you are a mobile developer like me, you need to have your device in developer mode in order to run your builds on something other than the extremely slow Android emulators provided by Android Studio. The problem is, the way to enable developer mode on your Android device is a bit cryptic.&lt;/p&gt;

&lt;p&gt;First, open your device’s settings app. Before developer options becomes an available setting, we first must find the phone’s build number, and this is typically in a group called something like &lt;strong&gt;Software Info&lt;/strong&gt; or &lt;strong&gt;About Phone&lt;/strong&gt;. On most Android devices, you will be able to search for “Build Number”, and you will get exactly what you are looking for.&lt;/p&gt;

&lt;p&gt;Now that you have found the build number screen, you will need to tap on the &lt;em&gt;Build Number&lt;/em&gt; field &lt;strong&gt;seven&lt;/strong&gt; times. Once you start tapping the build number, a small alert will prompt you saying &lt;em&gt;You are now # steps away from being a developer&lt;/em&gt;. The number will count down every time you tap the field, until you have reached &lt;strong&gt;seven&lt;/strong&gt; taps, at which point the prompt will display &lt;em&gt;You are now a developer!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that you are a developer, the “Developer options” will be available to you as an option in Settings. Now you’ll be able to enable things like USB debugging, WebView implementation, Bluetooth HCI snoop logging, and more. To get to developer options, search in your settings for “Developer options”.&lt;/p&gt;

&lt;p&gt;To turn developer options back off, just flip the switch at the top of the developer options screen to “off”. Once you navigate away from this screen, it will be gone from your phone until you repeat the above steps to enable developer mode.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-05/android-device-developer-mode</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-05/android-device-developer-mode</guid>
        
        
        <category>Android</category>
        
        <category>Learning</category>
        
        <category>Tips and Tricks</category>
        
      </item>
    
      <item>
        <title>How to Learn a New Programming Language</title>
        <description>&lt;p&gt;The best way to learn &lt;strong&gt;any&lt;/strong&gt; language is to simply &lt;em&gt;just use it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that being said, I often find that new developers just want to learn the newest, flashiest, most “cool” language like Python or some new JavaScript library. This endeavor may be fruitless if you are not first familiar with the underlying concepts and techniques associated with programming in general.&lt;/p&gt;

&lt;p&gt;The best advice that I can offer would be to learn algorithms, design patterns, and programming fundamentals. Once you have learned these things, you can write virtually any program in virtually any language.&lt;/p&gt;

&lt;p&gt;For example - I do not know how to use the language Ruby. However, I am about to walk you through the popular FizzBuzz program in Ruby by using my knowledge of programming fundamentals (loops, conditionals, operators, io, etc.):&lt;/p&gt;

&lt;p&gt;The first thing I need to do is define the problem. This is the first step to writing &lt;strong&gt;any&lt;/strong&gt; program. If you don’t first know what the problem is, you cannot find a solution to it. The problem is as such: For each number from 1 to 100 I would like to print “Fizz” if the number is divisible by 3, “Buzz” if the number is divisible by 5, or “FizzBuzz” if the number is divisible by both.&lt;/p&gt;

&lt;p&gt;The next thing I need to do is check the Ruby documentation for using a “&lt;a href=&quot;https://docs.ruby-lang.org/en/2.4.0/syntax/control_expressions_rdoc.html#label-until+Loop&quot;&gt;loop&lt;/a&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 0

until a &amp;gt; 100 do
  a += 1
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that I have an &lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt; loop, I need to check how to do modular arithmetic in Ruby by once again, checking the &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Numeric.html#method-i-modulo&quot;&gt;documentation&lt;/a&gt;, as well as checking &lt;a href=&quot;https://ruby-doc.org/core-2.3.0/doc/syntax/control_expressions_rdoc.html&quot;&gt;how to call &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements&lt;/a&gt;, then applying what I’ve found, modifying my code as such:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 0

until a &amp;gt; 100 do

  if a % 3 == 0
    print fizz
  end

  if a % 5 == 0
    print buzz
  end

  a += 1
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, you’ll notice I just wrote “print fizz” and “print buzz” in my if statements. Now I need to check &lt;a href=&quot;https://docs.ruby-lang.org/en/2.6.0/IRB/OutputMethod.html&quot;&gt;how to write my results&lt;/a&gt; via the documentation, and modify my code as such:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 1

until a &amp;gt; 100 do

  if a % 3 == 0
    print &quot;fizz&quot;
  end

  if a % 5 == 0
    print &quot;buzz&quot;
  end

  a += 1
  puts &quot;&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There we go - my first ruby program has been written. You saw my thought process as well as my methods on finding out &lt;em&gt;how&lt;/em&gt; to get the program done. Now I can think of a more difficult or complex program, and use the same methods to write it in ruby. In time, just by &lt;strong&gt;using&lt;/strong&gt; ruby, I will have learned it.&lt;/p&gt;

&lt;p&gt;Also keep in mind that this program is likely not the best way of handling things - there are improvements to be made. That is okay. Nobody will expect you to write perfect code while learning.&lt;/p&gt;

&lt;p&gt;So how do you learn Python or JavaScript or C++ or literally &lt;strong&gt;any other language&lt;/strong&gt;? Replace every instance of the word “Ruby” in this answer, and replace it with whichever programming language you want to learn. By the end, you’ll have a FizzBuzz program. Then, all you have to do is think of another more complex problem and &lt;strong&gt;just do it.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-05/learning-a-new-programming-language</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-05/learning-a-new-programming-language</guid>
        
        
        <category>Programming</category>
        
        <category>Learning</category>
        
        <category>Tips and Tricks</category>
        
      </item>
    
      <item>
        <title>Creating Firebase Cloud Functions in TypeScript</title>
        <description>&lt;p&gt;Firebase is awesome. Let’s just start with that. Super cheap, super easy to set up and use, and loads of functionality offered. That being said, let’s look at how to create cloud functions for Firebase in TypeScript.&lt;/p&gt;

&lt;h2 id=&quot;what-are-cloud-functions&quot;&gt;What are Cloud Functions?&lt;/h2&gt;
&lt;p&gt;Cloud Functions are single-purpose JavaScript functions that are executed in a secure, managed Node.js environment. Basically, they allow you to create a mobile backend without having to deal with the hassle of managing servers. &lt;em&gt;But wait, this says single-purpose &lt;strong&gt;JavaScript&lt;/strong&gt; functions, not TypeScript&lt;/em&gt;. Yeah, that’s no big deal - TypeScript is just a JavaScript superset that transcompiles to JavaScript, so we can use it! The cool thing about cloud functions is that they take one command to push to the Firebase servers. After that, Cloud Functions automatically scales up computing resources to match the usage patterns of your app. You never worry about SSH credentials, server configuration, provisioning new servers, or decommissioning old ones.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-started&quot;&gt;Let’s Get Started&lt;/h2&gt;
&lt;p&gt;Assuming you already have a Firebase account created with an App on it (if you don’t already, it’s super easy to create one, so I won’t go through it for the purposes of this post), open up a new terminal, navigate to whatever directory you want your firebase cloud functions to live in (or create a new one [&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir cloud-functions&lt;/code&gt;]) and type &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase login&lt;/code&gt;. If you get an error that firebase isn’t a recognized cmdlet or something of that nature, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g firebase&lt;/code&gt;. If you had to run the install command, either restart your terminal, or if you are using Powershell or MS Command Line just run &lt;code class=&quot;highlighter-rouge&quot;&gt;refreshenv&lt;/code&gt; and run the &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase login&lt;/code&gt; again. You’ll be directed to your web browser to log in to your Firebase console. Login, come back to your terminal and run &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase init&lt;/code&gt;. You’ll get a prompt saying “You’re about to initialize a Firebase project in this directory: &lt;Your_Directory_Name&gt; Are you ready to proceed?&quot; Type `Y` to proceed, and you'll be greeted with 5 options : Database, Firestore, Functions, Hosting, and Storage. We can look at some of the other selections in another blog post if anyone is interested (leave a comment), but for now we just want functions. Press the down button on your keyboard until you get to `Functions`, then press &quot;Space&quot; on your keyboard to make the selection, and hit &quot;Enter&quot;. Now you'll be prompted to select the project you want to create cloud functions for. If you don't already have one, you can create a new project from this window, or select one of the projects you already have. The next question will be whether you want to use JavaScript or TypeScript, which we're obviously going to take TypeScript, so select that. The next option is totally up to you - it asks if you want to use TSLint to catch probable bugs and style enforcement. My view on TSLint is that it can only help, it certainly can't hurt, and I would use it 9 times out of 10. Once you select your TSLint option, a few `.json` files and your `index.ts` file will be created, giving you the following project structure:&lt;/Your_Directory_Name&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myproject&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;  
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tsconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tslint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opted&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tslint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wont&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;here&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeScript&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cloud&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Functions&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Built&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transpiled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;debugging&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll be prompted with 1 final question - Do you want to install dependencies with npm now? Type &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;, as we’ll need to install those dependencies eventually, so it might as well be now!&lt;/p&gt;

&lt;h2 id=&quot;write--deploy&quot;&gt;Write &amp;amp; Deploy&lt;/h2&gt;
&lt;p&gt;Once your firebase project has been initialized, open it up in your code editor of choice and look at the default TypeScript code. It’s commented out, but it shows you a good example of a helloWorld cloud function, shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'firebase-functions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from Firebase!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Uncomment that out, and let’s send it up to our project. Note that this is how you create functions. If you want a function that will add two numbers, you can do that like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let’s send these up to the firebase app. Open up your terminal and type &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase deploy&lt;/code&gt;. Once they’re deployed, you can see them in the “Cloud Functions” section of your Firebase console. Then you can call them from your browswer or ping them however you prefer. Cloud functions are super flexible and I would highly recommend trying them out.&lt;/p&gt;
</description>
        <pubDate>2020-09-03</pubDate>
        <link>http://localhost:4000/articles/2019-02/firebase-cloud-func-typescript</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019-02/firebase-cloud-func-typescript</guid>
        
        
        <category>TypeScript</category>
        
      </item>
    
  </channel>
</rss>
